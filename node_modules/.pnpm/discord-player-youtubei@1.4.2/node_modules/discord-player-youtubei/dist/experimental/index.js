"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/experimental/index.ts
var experimental_exports = {};
__export(experimental_exports, {
  createServerAbrStream: () => createServerAbrStream,
  getGoogleVideoOrThrow: () => getGoogleVideoOrThrow,
  poTokenExtraction: () => poTokenExtraction
});
module.exports = __toCommonJS(experimental_exports);

// lib/experimental/PoToken/PoToken.ts
var import_bgutils_js = require("bgutils-js");
var import_happy_dom = require("happy-dom");
var HARD_CODED_REQ_KEY = "O43z0dpjhgX20SCx4KAo";
async function poTokenExtraction(innertube) {
  const visitorData = innertube.session.context.client.visitorData;
  if (!visitorData)
    throw new Error("Innertube instance does not contain visitor data");
  const window = new import_happy_dom.Window();
  Object.assign(globalThis, {
    document: window.document,
    window
  });
  const bgConfig = {
    // excuse my variable naming
    fetch: (i, a) => fetch(i, a),
    globalObj: globalThis,
    identifier: visitorData,
    requestKey: HARD_CODED_REQ_KEY
  };
  const challenge = await import_bgutils_js.BG.Challenge.create(bgConfig);
  if (!challenge)
    throw new Error("Unable to retrieve challenge data from botguard");
  const jsInter = challenge.interpreterJavascript.privateDoNotAccessOrElseSafeScriptWrappedValue;
  if (jsInter) {
    new Function(jsInter)();
  } else throw new Error("Unable to load botguard's VM");
  return import_bgutils_js.BG.PoToken.generate({
    bgConfig,
    program: challenge.program,
    globalName: challenge.globalName
  });
}

// lib/common/extractVideoID.ts
function extractVideoId(vid) {
  const YOUTUBE_REGEX = /^https:\/\/(www\.)?youtu(\.be\/[A-Za-z0-9]{11}(.+)?|be\.com\/watch\?v=[A-Za-z0-9]{11}(&.+)?)/;
  if (!YOUTUBE_REGEX.test(vid)) throw new Error("Invalid youtube url");
  let id = new URL(vid).searchParams.get("v");
  if (!id) id = vid.split("/").at(-1)?.split("?").at(0);
  return id;
}

// lib/experimental/ServerAbrStream/index.ts
var import_stream = require("stream");
async function getGoogleVideoOrThrow() {
  try {
    return (await import("googlevideo")).default;
  } catch {
    throw new Error(
      'Unable to find googlevideo. Please install it via "npm install googlevideo"'
    );
  }
}
async function createServerAbrStream(track, ext, onError) {
  const innertube = ext.innerTube;
  const { ServerAbrStream } = await getGoogleVideoOrThrow();
  if (!innertube.session.player)
    throw new Error("ServerAbrStream does not work without a valid player.");
  const videoInfo = await innertube.getBasicInfo(
    extractVideoId(track.url),
    "WEB"
  );
  const fmt = videoInfo.chooseFormat({ type: "audio", quality: "best" });
  const audio = {
    itag: fmt.itag,
    lastModified: fmt.last_modified_ms,
    xtags: fmt.xtags
  };
  const sabrStreamUrl = innertube.session.player.decipher(
    videoInfo.page[0].streaming_data?.server_abr_streaming_url
  );
  const videoPlaybackUstreamerConfig = videoInfo.page[0].player_config?.media_common_config.media_ustreamer_request_config?.video_playback_ustreamer_config;
  if (!videoPlaybackUstreamerConfig)
    throw new Error("ustreamerConfig not found");
  if (!sabrStreamUrl) throw new Error("serverAbrStreamingUrl not found");
  const sabrStream = new ServerAbrStream({
    fetch: innertube.session.http.fetch_function,
    serverAbrStreamingUrl: sabrStreamUrl,
    videoPlaybackUstreamerConfig,
    durationMs: (videoInfo.basic_info.duration ?? 0) * 1e3
  });
  const readable = new import_stream.PassThrough();
  sabrStream.on("data", (data) => {
    for (const formatData of data.initializedFormats) {
      if (formatData.mimeType?.includes("video")) continue;
      const media = formatData.mediaChunks;
      for (const chunk of media) {
        readable.write(chunk);
      }
    }
  });
  sabrStream.on("error", (err) => {
    if (onError) onError(err);
  });
  sabrStream.on("end", () => {
    readable.end();
  });
  sabrStream.init({
    audioFormats: [audio],
    videoFormats: [],
    clientAbrState: {
      startTimeMs: 0,
      mediaType: 1
    }
  });
  return readable;
}

// lib/experimental/index.ts
console.log(
  "\x1B[2;33mYou are using discord-player-youtubei's experimental features. Expect bugs.\x1B[0m"
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createServerAbrStream,
  getGoogleVideoOrThrow,
  poTokenExtraction
});
