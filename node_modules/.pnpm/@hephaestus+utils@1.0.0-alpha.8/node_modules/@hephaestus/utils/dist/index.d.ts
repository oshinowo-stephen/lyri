declare class ExtendedMap<Key, T> extends Map<Key, T> {
    find(func: (item: T) => boolean): T | undefined;
    filter(func: (item: T) => boolean): T[];
    map<R>(func: (item: T) => R): R[];
    reduce<R>(func: (accumulator: R, item: T) => R, initialValue: R): R;
    every(func: (item: T) => boolean): boolean;
    some(func: (item: T) => boolean): boolean;
}

declare function identity<T>(list: Array<T | null | undefined>): T[];

declare type Content = unknown[];
declare enum LEVEL {
    SUCCESS = "green",
    WARN = "yellow",
    ERROR = "red",
    INFO = "cyan",
    DEFAULT = "white"
}
declare function log(content: Content, level?: LEVEL, stream?: NodeJS.WriteStream): void;
declare function error(...content: Content): void;
declare function info(...content: Content): void;
declare function success(...content: Content): void;
declare function warn(...content: Content): void;

type logger_LEVEL = LEVEL;
declare const logger_LEVEL: typeof LEVEL;
declare const logger_log: typeof log;
declare const logger_error: typeof error;
declare const logger_info: typeof info;
declare const logger_success: typeof success;
declare const logger_warn: typeof warn;
declare namespace logger {
  export {
    logger_LEVEL as LEVEL,
    logger_log as log,
    logger_error as error,
    logger_info as info,
    logger_success as success,
    logger_warn as warn,
  };
}

declare type MaybeArray<T> = T | T[];

declare function unknownHasKey<T extends string>(value: unknown, key: T): value is {
    [K in T]: unknown;
};

export { ExtendedMap, MaybeArray, identity, logger, unknownHasKey };
