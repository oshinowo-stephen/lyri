var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/extended-map.ts
var ExtendedMap = class extends Map {
  find(func) {
    for (const item of this.values()) {
      if (func(item)) {
        return item;
      }
    }
    return void 0;
  }
  filter(func) {
    const arr = [];
    for (const item of this.values()) {
      if (func(item)) {
        arr.push(item);
      }
    }
    return arr;
  }
  map(func) {
    const arr = [];
    for (const item of this.values()) {
      arr.push(func(item));
    }
    return arr;
  }
  reduce(func, initialValue) {
    const iter = this.values();
    let current = iter.next();
    let result = initialValue ?? current.value;
    while (!current.done) {
      result = func(result, current.value);
      current = iter.next();
    }
    return result;
  }
  every(func) {
    for (const item of this.values()) {
      if (!func(item)) {
        return false;
      }
    }
    return true;
  }
  some(func) {
    for (const item of this.values()) {
      if (func(item)) {
        return true;
      }
    }
    return false;
  }
};

// src/identity.ts
function identity(list) {
  return list.filter((x) => x != null);
}

// src/logger.ts
var logger_exports = {};
__export(logger_exports, {
  LEVEL: () => LEVEL,
  error: () => error,
  info: () => info,
  log: () => log,
  success: () => success,
  warn: () => warn
});
import {
  inspect,
  formatWithOptions
} from "util";
var LEVEL = /* @__PURE__ */ ((LEVEL2) => {
  LEVEL2["SUCCESS"] = "green";
  LEVEL2["WARN"] = "yellow";
  LEVEL2["ERROR"] = "red";
  LEVEL2["INFO"] = "cyan";
  LEVEL2["DEFAULT"] = "white";
  return LEVEL2;
})(LEVEL || {});
function log(content, level = "white" /* DEFAULT */, stream = process.stdout) {
  const codes = inspect.colors[level];
  const text = content.join(" ");
  const message = codes ? `\x1B[${codes[0]}m${text}\x1B[${codes[1]}m` : text;
  stream.write(Buffer.from(`ERIS_BOILER: ${formatWithOptions({ colors: true }, message)}
`));
}
function error(...content) {
  return log(content, "red" /* ERROR */, process.stderr);
}
function info(...content) {
  return log(content, "cyan" /* INFO */);
}
function success(...content) {
  return log(content, "green" /* SUCCESS */);
}
function warn(...content) {
  return log(content, "yellow" /* WARN */);
}

// src/unknown-has-key.ts
function unknownHasKey(value, key) {
  return value != null && typeof value === "object" && key in value;
}
export {
  ExtendedMap,
  identity,
  logger_exports as logger,
  unknownHasKey
};
